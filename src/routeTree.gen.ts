/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as AppImport } from './routes/_app'
import { Route as IndexImport } from './routes/index'
import { Route as AuthLayoutImport } from './routes/auth/_layout'
import { Route as AuthLayoutRegisterImport } from './routes/auth/_layout/register'
import { Route as AuthLayoutLoginImport } from './routes/auth/_layout/login'
import { Route as AppMProjectsIndexImport } from './routes/_app/m/projects/index'
import { Route as AppDProjectsIndexImport } from './routes/_app/d/projects/index'
import { Route as AppMProjectsProjectIdLayoutImport } from './routes/_app/m/projects/$projectId/_layout'
import { Route as AppDProjectsProjectIdLayoutImport } from './routes/_app/d/projects/$projectId/_layout'

// Create Virtual Routes

const AuthImport = createFileRoute('/auth')()
const AppMProjectsProjectIdImport = createFileRoute(
  '/_app/m/projects/$projectId',
)()
const AppDProjectsProjectIdImport = createFileRoute(
  '/_app/d/projects/$projectId',
)()

// Create/Update Routes

const AuthRoute = AuthImport.update({
  id: '/auth',
  path: '/auth',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const AppRoute = AppImport.update({
  id: '/_app',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const AuthLayoutRoute = AuthLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AuthRoute,
} as any)

const AuthLayoutRegisterRoute = AuthLayoutRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AuthLayoutLoginRoute = AuthLayoutLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthLayoutRoute,
} as any)

const AppMProjectsProjectIdRoute = AppMProjectsProjectIdImport.update({
  id: '/m/projects/$projectId',
  path: '/m/projects/$projectId',
  getParentRoute: () => AppRoute,
} as any)

const AppDProjectsProjectIdRoute = AppDProjectsProjectIdImport.update({
  id: '/d/projects/$projectId',
  path: '/d/projects/$projectId',
  getParentRoute: () => AppRoute,
} as any)

const AppMProjectsIndexRoute = AppMProjectsIndexImport.update({
  id: '/m/projects/',
  path: '/m/projects/',
  getParentRoute: () => AppRoute,
} as any)

const AppDProjectsIndexRoute = AppDProjectsIndexImport.update({
  id: '/d/projects/',
  path: '/d/projects/',
  getParentRoute: () => AppRoute,
} as any)

const AppMProjectsProjectIdLayoutRoute =
  AppMProjectsProjectIdLayoutImport.update({
    id: '/_layout',
    getParentRoute: () => AppMProjectsProjectIdRoute,
  } as any)

const AppDProjectsProjectIdLayoutRoute =
  AppDProjectsProjectIdLayoutImport.update({
    id: '/_layout',
    getParentRoute: () => AppDProjectsProjectIdRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/auth': {
      id: '/auth'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthImport
      parentRoute: typeof rootRoute
    }
    '/auth/_layout': {
      id: '/auth/_layout'
      path: '/auth'
      fullPath: '/auth'
      preLoaderRoute: typeof AuthLayoutImport
      parentRoute: typeof AuthRoute
    }
    '/auth/_layout/login': {
      id: '/auth/_layout/login'
      path: '/login'
      fullPath: '/auth/login'
      preLoaderRoute: typeof AuthLayoutLoginImport
      parentRoute: typeof AuthLayoutImport
    }
    '/auth/_layout/register': {
      id: '/auth/_layout/register'
      path: '/register'
      fullPath: '/auth/register'
      preLoaderRoute: typeof AuthLayoutRegisterImport
      parentRoute: typeof AuthLayoutImport
    }
    '/_app/d/projects/': {
      id: '/_app/d/projects/'
      path: '/d/projects'
      fullPath: '/d/projects'
      preLoaderRoute: typeof AppDProjectsIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/m/projects/': {
      id: '/_app/m/projects/'
      path: '/m/projects'
      fullPath: '/m/projects'
      preLoaderRoute: typeof AppMProjectsIndexImport
      parentRoute: typeof AppImport
    }
    '/_app/d/projects/$projectId': {
      id: '/_app/d/projects/$projectId'
      path: '/d/projects/$projectId'
      fullPath: '/d/projects/$projectId'
      preLoaderRoute: typeof AppDProjectsProjectIdImport
      parentRoute: typeof AppImport
    }
    '/_app/d/projects/$projectId/_layout': {
      id: '/_app/d/projects/$projectId/_layout'
      path: '/d/projects/$projectId'
      fullPath: '/d/projects/$projectId'
      preLoaderRoute: typeof AppDProjectsProjectIdLayoutImport
      parentRoute: typeof AppDProjectsProjectIdRoute
    }
    '/_app/m/projects/$projectId': {
      id: '/_app/m/projects/$projectId'
      path: '/m/projects/$projectId'
      fullPath: '/m/projects/$projectId'
      preLoaderRoute: typeof AppMProjectsProjectIdImport
      parentRoute: typeof AppImport
    }
    '/_app/m/projects/$projectId/_layout': {
      id: '/_app/m/projects/$projectId/_layout'
      path: '/m/projects/$projectId'
      fullPath: '/m/projects/$projectId'
      preLoaderRoute: typeof AppMProjectsProjectIdLayoutImport
      parentRoute: typeof AppMProjectsProjectIdRoute
    }
  }
}

// Create and export the route tree

interface AppDProjectsProjectIdRouteChildren {
  AppDProjectsProjectIdLayoutRoute: typeof AppDProjectsProjectIdLayoutRoute
}

const AppDProjectsProjectIdRouteChildren: AppDProjectsProjectIdRouteChildren = {
  AppDProjectsProjectIdLayoutRoute: AppDProjectsProjectIdLayoutRoute,
}

const AppDProjectsProjectIdRouteWithChildren =
  AppDProjectsProjectIdRoute._addFileChildren(
    AppDProjectsProjectIdRouteChildren,
  )

interface AppMProjectsProjectIdRouteChildren {
  AppMProjectsProjectIdLayoutRoute: typeof AppMProjectsProjectIdLayoutRoute
}

const AppMProjectsProjectIdRouteChildren: AppMProjectsProjectIdRouteChildren = {
  AppMProjectsProjectIdLayoutRoute: AppMProjectsProjectIdLayoutRoute,
}

const AppMProjectsProjectIdRouteWithChildren =
  AppMProjectsProjectIdRoute._addFileChildren(
    AppMProjectsProjectIdRouteChildren,
  )

interface AppRouteChildren {
  AppDProjectsIndexRoute: typeof AppDProjectsIndexRoute
  AppMProjectsIndexRoute: typeof AppMProjectsIndexRoute
  AppDProjectsProjectIdRoute: typeof AppDProjectsProjectIdRouteWithChildren
  AppMProjectsProjectIdRoute: typeof AppMProjectsProjectIdRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppDProjectsIndexRoute: AppDProjectsIndexRoute,
  AppMProjectsIndexRoute: AppMProjectsIndexRoute,
  AppDProjectsProjectIdRoute: AppDProjectsProjectIdRouteWithChildren,
  AppMProjectsProjectIdRoute: AppMProjectsProjectIdRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthLayoutRouteChildren {
  AuthLayoutLoginRoute: typeof AuthLayoutLoginRoute
  AuthLayoutRegisterRoute: typeof AuthLayoutRegisterRoute
}

const AuthLayoutRouteChildren: AuthLayoutRouteChildren = {
  AuthLayoutLoginRoute: AuthLayoutLoginRoute,
  AuthLayoutRegisterRoute: AuthLayoutRegisterRoute,
}

const AuthLayoutRouteWithChildren = AuthLayoutRoute._addFileChildren(
  AuthLayoutRouteChildren,
)

interface AuthRouteChildren {
  AuthLayoutRoute: typeof AuthLayoutRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLayoutRoute: AuthLayoutRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/about': typeof AboutRoute
  '/auth': typeof AuthLayoutRouteWithChildren
  '/auth/login': typeof AuthLayoutLoginRoute
  '/auth/register': typeof AuthLayoutRegisterRoute
  '/d/projects': typeof AppDProjectsIndexRoute
  '/m/projects': typeof AppMProjectsIndexRoute
  '/d/projects/$projectId': typeof AppDProjectsProjectIdLayoutRoute
  '/m/projects/$projectId': typeof AppMProjectsProjectIdLayoutRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AppRouteWithChildren
  '/about': typeof AboutRoute
  '/auth': typeof AuthLayoutRouteWithChildren
  '/auth/login': typeof AuthLayoutLoginRoute
  '/auth/register': typeof AuthLayoutRegisterRoute
  '/d/projects': typeof AppDProjectsIndexRoute
  '/m/projects': typeof AppMProjectsIndexRoute
  '/d/projects/$projectId': typeof AppDProjectsProjectIdLayoutRoute
  '/m/projects/$projectId': typeof AppMProjectsProjectIdLayoutRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_app': typeof AppRouteWithChildren
  '/about': typeof AboutRoute
  '/auth': typeof AuthRouteWithChildren
  '/auth/_layout': typeof AuthLayoutRouteWithChildren
  '/auth/_layout/login': typeof AuthLayoutLoginRoute
  '/auth/_layout/register': typeof AuthLayoutRegisterRoute
  '/_app/d/projects/': typeof AppDProjectsIndexRoute
  '/_app/m/projects/': typeof AppMProjectsIndexRoute
  '/_app/d/projects/$projectId': typeof AppDProjectsProjectIdRouteWithChildren
  '/_app/d/projects/$projectId/_layout': typeof AppDProjectsProjectIdLayoutRoute
  '/_app/m/projects/$projectId': typeof AppMProjectsProjectIdRouteWithChildren
  '/_app/m/projects/$projectId/_layout': typeof AppMProjectsProjectIdLayoutRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/auth'
    | '/auth/login'
    | '/auth/register'
    | '/d/projects'
    | '/m/projects'
    | '/d/projects/$projectId'
    | '/m/projects/$projectId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/auth'
    | '/auth/login'
    | '/auth/register'
    | '/d/projects'
    | '/m/projects'
    | '/d/projects/$projectId'
    | '/m/projects/$projectId'
  id:
    | '__root__'
    | '/'
    | '/_app'
    | '/about'
    | '/auth'
    | '/auth/_layout'
    | '/auth/_layout/login'
    | '/auth/_layout/register'
    | '/_app/d/projects/'
    | '/_app/m/projects/'
    | '/_app/d/projects/$projectId'
    | '/_app/d/projects/$projectId/_layout'
    | '/_app/m/projects/$projectId'
    | '/_app/m/projects/$projectId/_layout'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppRoute: typeof AppRouteWithChildren
  AboutRoute: typeof AboutRoute
  AuthRoute: typeof AuthRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppRoute: AppRouteWithChildren,
  AboutRoute: AboutRoute,
  AuthRoute: AuthRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_app",
        "/about",
        "/auth"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_app": {
      "filePath": "_app.tsx",
      "children": [
        "/_app/d/projects/",
        "/_app/m/projects/",
        "/_app/d/projects/$projectId",
        "/_app/m/projects/$projectId"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/auth": {
      "filePath": "auth",
      "children": [
        "/auth/_layout"
      ]
    },
    "/auth/_layout": {
      "filePath": "auth/_layout.tsx",
      "parent": "/auth",
      "children": [
        "/auth/_layout/login",
        "/auth/_layout/register"
      ]
    },
    "/auth/_layout/login": {
      "filePath": "auth/_layout/login.tsx",
      "parent": "/auth/_layout"
    },
    "/auth/_layout/register": {
      "filePath": "auth/_layout/register.tsx",
      "parent": "/auth/_layout"
    },
    "/_app/d/projects/": {
      "filePath": "_app/d/projects/index.tsx",
      "parent": "/_app"
    },
    "/_app/m/projects/": {
      "filePath": "_app/m/projects/index.tsx",
      "parent": "/_app"
    },
    "/_app/d/projects/$projectId": {
      "filePath": "_app/d/projects/$projectId",
      "parent": "/_app",
      "children": [
        "/_app/d/projects/$projectId/_layout"
      ]
    },
    "/_app/d/projects/$projectId/_layout": {
      "filePath": "_app/d/projects/$projectId/_layout.tsx",
      "parent": "/_app/d/projects/$projectId"
    },
    "/_app/m/projects/$projectId": {
      "filePath": "_app/m/projects/$projectId",
      "parent": "/_app",
      "children": [
        "/_app/m/projects/$projectId/_layout"
      ]
    },
    "/_app/m/projects/$projectId/_layout": {
      "filePath": "_app/m/projects/$projectId/_layout.tsx",
      "parent": "/_app/m/projects/$projectId"
    }
  }
}
ROUTE_MANIFEST_END */
